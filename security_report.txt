Team 16 Blue Team Final Report
Marcus Gula, Elton Mwale

Relevant rules are commented on to provide context on how it applies to this application. Other rules 
simply have the comment N/A (not applicable) - the cases these rules are referring to either don't appear within
the scope of this program or have been purposely avoided through correct implementation.

Rule 03. Expressions (EXP)
    EXP30-C. Do not depend on the order of evaluation for side effects
        N/A
        
    EXP32-C. Do not access a volatile object through a nonvolatile reference
        N/A
        
    EXP33-C. Do not read uninitialized memory
        All instances of unitialized memory (height, width, and difficulty to name a few) are assigned values
        before being read.
    
    EXP34-C. Do not dereference null pointers
        N/A

    EXP35-C. Do not modify objects with temporary lifetime
        N/A

    EXP36-C. Do not cast pointers into more strictly aligned pointer types
        N/A

    EXP37-C. Call functions with the correct number and type of arguments
        Calls to C standard library functions as well as functions written for the program are all made with 
        the correct number and type of arguments.

    EXP39-C. Do not access a variable through a pointer of an incompatible type
        N/A

    EXP40-C. Do not modify constant objects
        N/A

    EXP42-C. Do not compare padding data
        N/A
        
    EXP43-C. Avoid undefined behavior when using restrict-qualified pointers
        N/A
        
    EXP44-C. Do not rely on side effects in operands to sizeof, _Alignof, or _Generic
        N/A

    EXP45-C. Do not perform assignments in selection statements
        N/A

    EXP46-C. Do not use a bitwise operator with a Boolean-like operand
        N/A

    EXP47-C. Do not call va_arg with an argument of the incorrect type
        N/A
    
Rule 06. Arrays (ARR)
    ARR30-C. Do not form or use out-of-bounds pointers or array subscripts
        N/A
        
    ARR32-C. Ensure size arguments for variable length arrays are in a valid range
        promptHeight() and promptWidth() check that the inputted height and width are within
        a certain predefined range. This case doesn't arise with command line arguments, as 
        only a single character is accepted, which is interpreted into a distinct, hard-coded
        (and safe) value for height and width (s --> height and width = 9).
        
    ARR36-C. Do not subtract or compare two pointers that do not refer to the same array
        N/A
        
    ARR37-C. Do not add or subtract an integer to a pointer to a non-array object
        N/A
        
    ARR38-C. Guarantee that library functions do not form invalid pointers
        N/A
        
    ARR39-C. Do not add or subtract a scaled integer to a pointer
        N/A
    
Rule 07. Characters and Strings (STR)
    STR30-C. Do not attempt to modify string literals
        A case similar to this appears in promptHeight() and promptWidth() - the adress of 
        a pointer to a char is passed as an argument to strtol(). Since the char pointer is 
        uninitialized, it is my belief that it is not a string literal, so I think this 
        rule is followed. 
        
        However, if an unitialized char pointer can be considered a string literal, then it is 
        possible that this rule is being broken, since I don't know everything that strtol() is 
        doing to the address of the char pointer. If strtol() is accessing char pointer[someIndex]
        and assigning it some value, then this rule is being broken.

    STR31-C. Guarantee that storage for strings has sufficient space for character data and the null terminator
        N/A
        
    STR32-C. Do not pass a non-null-terminated character sequence to a library function that expects a string
        N/A
        
    STR34-C. Cast characters to unsigned char before converting to larger integer sizes
        N/A

    STR37-C. Arguments to character-handling functions must be representable as an unsigned char
        N/A
        
    STR38-C. Do not confuse narrow and wide character strings and functions
        N/A
    
Rule 08. Memory Management (MEM)
    MEM30-C. Do not access freed memory
        N/A
        
    MEM31-C. Free dynamically allocated memory when no longer needed
        Care was taken to ensure that every malloc() has a corresponding free().
        
    MEM33-C. Allocate and copy structures containing a flexible array member dynamically
        N/A
        
    MEM34-C. Only free memory allocated dynamically
        N/A
        
    MEM35-C. Allocate sufficient memory for an object
        N/A
        
    MEM36-C. Do not modify the alignment of objects by calling realloc()
        N/A
    
    
    
Actions in response to Red Team's Bug Report

    Bug 1: scanf() has been replaced with fgets() in the promptDifficulty() method.

    Bug 2: this behavior is intentional and is meant to enable actions like dddd -> enter to move the
        cursor right 4 times on one enter press, as opposed to d -> enter 4 times.
    
    Bug 3: I believe this issue is a result of how certain environments process unicode characters. In my 
        local environment, the board remains aligned correctly with unicode characters enabled; however, that 
        clearly does not appear to be the case for all environments, so an option to toggle between unicode
        characters and ascii characters only was added.
    
    Bug 4: the fix for bug 3 may have fixed this issue. Unable to reproduce, as I am unable to reproduce bug 3.
    
    Bug 5: this bug is the cause of bug 1 and has been fixed by replacing scanf() with fgets().

    Bug 6: unable to reproduce this bug (unless they are referring to the fact that the size of the board is
        does not change - this was intentional).

    Bug 7: more than likely, this is related to bug 3. Unable to reproduce, as I am unable to reproduce bug 3.

    Bug 8: this was a relatively simple lack of logic and has been fixed.